rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    // Reglas para proyectos
    match /projects/{projectId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }

    // Reglas para usuarios
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }    // Reglas para grupos
    match /groups/{groupId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // El creador puede actualizar todo
        resource.data.creatorId == request.auth.uid ||
        // Los usuarios pueden unirse/dejar el grupo
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'updatedAt']))
      );
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;

      // Reglas para las discusiones dentro de grupos
      match /discussions/{discussionId} {
        allow read: if true;
        allow create: if isAuthenticated() && exists(/databases/$(database)/documents/groups/$(groupId)) && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow update: if isAuthenticated() && (
          resource.data.authorId == request.auth.uid || 
          get(/databases/$(database)/documents/groups/$(groupId)).data.creatorId == request.auth.uid
        );
        allow delete: if isAuthenticated() && (
          resource.data.authorId == request.auth.uid || 
          get(/databases/$(database)/documents/groups/$(groupId)).data.creatorId == request.auth.uid
        );

        // Reglas para las respuestas en las discusiones
        match /replies/{replyId} {
          allow read: if true;
          allow create: if isAuthenticated() && exists(/databases/$(database)/documents/groups/$(groupId)) && 
            get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
          allow update, delete: if isAuthenticated() && (
            resource.data.authorId == request.auth.uid || 
            get(/databases/$(database)/documents/groups/$(groupId)).data.creatorId == request.auth.uid
          );
        }
      }
    }

    // Reglas para notificaciones
    match /notifications/{notifId} {
      allow read, write: if isAuthenticated();
    }

    // Reglas para comentarios
    match /comments/{commentId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
  }
}