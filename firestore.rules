rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Permitir lectura a cualquier usuario autenticado
    match /projects/{projectId} {
      allow read: if true;
      
      // Solo el autor puede editar o eliminar su proyecto
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
      
      // Solo usuarios logueados pueden crear
      allow create: if request.auth != null;
    }

    // Reglas para usuarios
    match /users/{userId} {
      allow read: if true; // p√∫blico
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId && 
          (
            !request.resource.data.diff(resource.data).affectedKeys().hasAny(['favorites']) || 
            (request.resource.data.favorites is list && 
             (resource.data.favorites == null || request.resource.data.favorites.size() <= resource.data.favorites.size() + 1))
          );
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Reglas para notificaciones (privadas)
    match /notifications/{notifId} {
      allow read, write: if true
    }

    // Reglas para comentarios
    match /comments/{commentId} {
      // Cualquiera puede leer los comentarios
      allow read: if true;
      
      // Solo usuarios autenticados pueden crear comentarios y deben ser el autor
      allow create: if request.auth != null &&
          request.resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);
      
      // Solo el autor del comentario puede eliminarlo
      allow delete: if request.auth != null && 
          get(resource.data.userRef).id == request.auth.uid;
          
      // Solo permitir actualizaciones de likes
      allow update: if request.auth != null &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) &&
          (request.resource.data.likes.toSet().difference(resource.data.likes.toSet()).size() <= 1) &&
          (resource.data.likes.toSet().difference(request.resource.data.likes.toSet()).size() <= 1);
    }    // Reglas para grupos
    match /groups/{groupId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (
          request.auth.uid == resource.data.creatorId ||
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'memberCount', 'updatedAt']) &&
           resource.data.members.hasAny([request.auth.uid]))
        );
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.creatorId;
    }
  }
}